diff --cc ChatApp/models.py
index 5eb9c65,28796c7..0000000
--- a/ChatApp/models.py
+++ b/ChatApp/models.py
@@@ -103,32 -74,19 +102,32 @@@ class Bookroom
      def create(cls, user_id, name, description, is_public):
          conn = db_pool.get_conn()
          try:
-            with conn.cursor() as cur:
-             sql = "INSERT INTO bookrooms (user_id, name, description, is_public) VALUES(%s, %s, %s, %s)"
-             cur.execute(sql,(user_id, name, description, is_public,))
-             conn.commit()
+             with conn.cursor() as cur:
+                 sql = "INSERT INTO bookrooms (user_id, name, description, is_public) VALUES(%s, %s, %s, %s)"
+                 cur.execute(sql,(user_id, name, description, is_public,))
+                 conn.commit()
          except pymysql.Error as e:
-            print(f'エラーが発生しています：{e}')
-            abort(500)
+             print(f'エラーが発生しています：{e}')
+             abort(500)
          finally:
 -            db_pool.release(conn)
 -        
 +           db_pool.release(conn)
 +    
      @classmethod
 -    def find_by_bookroom_id(cls, bookroom_id):
 +    def update(cls, bookroom_id, name, description):
 +        conn = db_pool.get_conn()
 +        try:
 +            with conn.cursor() as cur:
 +                sql = "UPDATE bookrooms SET name=%s, description=%s WHERE id=%s;"
 +                cur.execute(sql, (name, description, bookroom_id))
 +                conn.commit()
 +        except pymysql.Error as e:
 +            print(f'エラーが発生しています：{e}')
 +            abort(500)
 +        finally:
 +            db_pool.release(conn)
      
 +    @classmethod
 +    def delete(cls, bookroom_id):
          conn = db_pool.get_conn()
          try:
              with conn.cursor() as cur:
@@@ -140,10 -99,58 +139,63 @@@
              abort(500)
          finally:
              db_pool.release(conn)
 +    
 +
 +
 +
 +
  ############################ブックルーム関係（ここまで）############################
  
+ ############################メッセージ関係（ここから）############################
+ class Message:
+     @classmethod
+     def create(cls, user_id, bookroom_id, message):
+         conn = db_pool.get_conn()
+         try:
+             with conn.cursor() as cur:
+                 sql = "INSERT INTO messages(user_id, bookroom_id, content) VALUES(%s, %s, %s)"
+                 cur.execute(sql, (user_id, bookroom_id, message,))
+                 conn.commit()
+         except pymysql.Error as e:
+             print(f'エラーが発生しています:) {e}')
+             abort(500)
+         finally:
+             db_pool.release(conn)
+ 
+     @classmethod
+     def get_all(cls, bookroom_id):
+         conn = db_pool.get_conn()
+         try:
+             with conn.cursor() as cur:
+                 sql = """
+                     SELECT m.id, u.id, u.name, m.content 
+                     FROM messages AS m 
+                     INNER JOIN users AS u ON m.user_id = u.id 
+                     WHERE m.bookroom_id = %s 
+                     ORDER BY m.id ASC;
+                 """
+                 cur.execute(sql, (bookroom_id,))
+                 messages = cur.fetchall()
+                 return messages
+         except pymysql.Error as e:
+             print(f'エラーが発生しています：{e}')
+             abort(500)
+         finally:
+             db_pool.release(conn)
+ 
+     
+     @classmethod
+     def delete(cls, message_id):
+         conn = db_pool.get_conn()
+         try:
+             with conn.cursor() as cur:
+                 sql = "DELETE FROM messages WHERE id=%s;"
+                 cur.execute(sql, (message_id,))
+                 conn.commit()
+         except pymysql.Error as e:
+             print(f'エラーが発生しています：{e}')
+             abort(500)
+         finally:
+             db_pool.release(conn)
+ 
+ ############################メッセージ関係（ここまで）############################
diff --git a/ChatApp/app.py b/ChatApp/app.py
index 61b0628..4d43474 100644
--- a/ChatApp/app.py
+++ b/ChatApp/app.py
@@ -73,13 +73,29 @@ def logout():
 #  パブリックブックルーム   #
 ###########################
 
-# パブリックブックルームの一覧表示
+####################################################
+#  ブックルームの作成者をチェックする関数　　　
+#　ログインできていない場合は、ログインリダイレクトを返す
+#　作成者でなければFALSEを返す
+#　作成者であればTRUEを返す　　
+####################################################
+
+def is_bookroom_owner(user_id, bookroom_id):
+    bookroom = Bookroom.find_by_bookroom_id(bookroom_id)
+    if not bookroom:
+        flash('ブックルームが存在しません')
+        return False
+    if bookroom['user_id'] != user_id:
+        flash('ブックルーム作成者のみ操作可能です')
+        return False
+    return True
 
+# パブリックブックルームの一覧表示
 @app.route("/public_bookrooms", methods=["GET"])
 def public_channels_view():
     # publicなブックルームのみ取得
     bookrooms = Bookroom.get_public_bookrooms()
-    return render_template("test/bookroom.html", bookrooms=bookrooms, is_public=True)
+    return render_template("test/bookroom.html", bookrooms=bookrooms, uid=session.get('user_id',TEST_USER_ID), is_public=True)
 
 # パブリックブックルームの作成
 @app.route('/public_bookrooms', methods=['POST'])
@@ -102,27 +118,36 @@ def create_public_bookroom():
         error = '既に同じ名前のブックルームが存在しています。'
         return render_template('test/error.html', error_message=error)
 
-# パブリックブックルームの更新
+
+# ブックルーム編集ページ表示
+@app.route('/public_bookrooms/update/<bookroom_id>', methods=['GET'])
+def show_public_bookroom(bookroom_id):
+    user_id = session.get('user_id', TEST_USER_ID)
+    if user_id is None:
+        return redirect(url_for('login_view'))
+    
+    if not is_bookroom_owner(user_id, bookroom_id):
+        return redirect(url_for('public_channels_view'))
+    return render_template("test/update-bookroom.html", bookroom=bookroom)
+
+
+# ブックルームの編集作業
 @app.route('/public_bookrooms/update/<bookroom_id>', methods=['POST'])
 def update_public_bookroom(bookroom_id):
-    # user_id = session.get('user_id')
-    # セッションが未実装なため、仮値を入れる
     user_id = session.get('user_id', TEST_USER_ID)
-
     if user_id is None:
         return redirect(url_for('login_view'))
     
-    bookroom = Bookroom.find_by_bookroom_id(bookroom_id)
-    if bookroom['user_id'] != user_id:
-        flash('ブックルーム作成者のみ編集可能です')
-    
+    if not is_bookroom_owner(user_id, bookroom_id):
+        return redirect(url_for('public_channels_view'))
+
     bookroom_name = request.form.get('bookroom_name')
     bookroom_description = request.form.get('bookroom_description')
     Bookroom.update(
         bookroom_id=bookroom_id,
         name=bookroom_name,
         description=bookroom_description
-    )
+        )
     return redirect(url_for("public_channels_view"))
 
 # パブリックブックルームの削除
@@ -134,12 +159,12 @@ def delete_public_bookroom(bookroom_id):
     if user_id is None:
         return redirect(url_for('login_view'))
     
-    bookroom = Bookroom.find_by_bookroom_id(bookroom_id)
-    if bookroom['user_id'] != user_id:
+    if not is_bookroom_owner(user_id, bookroom_id):
         flash('ブックルーム作成者のみ削除可能です')
     else:
         Bookroom.delete(bookroom_id)
-    return redirect(url_for('public_channels_view'))
+    return redirect(url_for("public_channels_view"))
+    
 
 ###########################
 # プライベートブックルーム  #
